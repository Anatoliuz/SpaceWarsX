#ifndef __ROCKET_H__#define __ROCKET_H__#include "cocos2d.h"#include "GameSprite.h"#include "coordinate_x_y.h"#include "movetype.h"#include "attacktype.h"USING_NS_CC;enum {	ROTATE_NONE,	ROTATE_CLOCKWISE,	ROTATE_COUNTER};class Rocket : public GameSprite {private:		float _targetRotation;	float _dr;	float _ar;	float _vr;	float _rotationSpring;	float _rotationDamping;	        //Олег    int health;   // Жизни    int damage;   // Урон    int speed;    // Скорость        coordinate_X_Y coordinate;   // Координаты    moveType unitMoveType;       // Тип движения    int sectorChange;            // Значение смены сектора    int countSectorChange;       // Счётчик смены сектора    bool keyRupture;             // Ключ разрываpublic:	CC_SYNTHESIZE(CCPoint, _vector, Vector);	CC_SYNTHESIZE(CCPoint, _pivot, Pivot);	CC_SYNTHESIZE(float, _speed, Speed);	CC_SYNTHESIZE(float, _angularSpeed, AngularSpeed);	CC_SYNTHESIZE(int, _rotationOrientation, RotationOrientation);		Rocket(void);	~Rocket(void);		static Rocket* create();		void update (float dt);		void reset (void);        void select (bool flag);        bool collidedWithSides (void);        inline void setTargetRotation (float value) {		        _targetRotation = value;    }        inline void setRotationFromVector () {        this->setTargetRotation(CC_RADIANS_TO_DEGREES( atan2(-_vector.y, _vector.x) ) );    }	        //Олег   Rocket(double X, double Y);   // Конструктор создаёт юнит на координатах X и Y            void changeCoordinate(double X, double Y);   // Увеличивает координаты юнита на X и Y соответственно        bool isSectorChange();   // Возвращает true, если юнит должен сменить сектор    bool isRupture();        // Возвращает true, если появляется разрыв        void incrementCountSectorChange();   // Увеличивает счётчик смены сектора    void clearCountSectorChange();       // Обнуляет счётчик смены сектора    void setKeyRupture(bool rupture);    // Установка ключа разрыва        int getSpeed();    moveType getMoveType();        void writeCoordinates();   // Вывод координат в консоль (для отладки)};#endif // __ROCKET_H__			